import fs from 'node:fs/promises';
import path from 'node:path';

const ICONS_DIR = path.resolve('components/icons');
const INDEX_FILE = path.join(ICONS_DIR, 'index.ts');

await fs.mkdir(ICONS_DIR, { recursive: true });

const entries = await fs.readdir(ICONS_DIR, { withFileTypes: true });
const files = entries
  .filter(e => e.isFile())
  .map(e => e.name)
  .filter(name => name.endsWith('.tsx'))
  .filter(name => name !== 'IconBase.tsx');

files.sort();

// Convert a filename (without extension) into a valid TS identifier
function toIdentifier(base) {
  // Replace invalid identifier characters with underscores
  let id = base.replace(/[^a-zA-Z0-9_$]/g, '_');
  // Ensure it doesn't start with a number
  if (/^[0-9]/.test(id)) id = `Icon_${id}`;
  // Fallback
  if (!id) id = 'Icon_unnamed';
  return id;
}

// Ensure unique identifiers in case multiple files sanitize to the same name
const used = new Map();
function uniqueIdentifier(base) {
  const initial = toIdentifier(base);
  if (!used.has(initial)) {
    used.set(initial, 1);
    return initial;
  }
  let n = used.get(initial);
  let candidate = `${initial}_${n}`;
  while (used.has(candidate)) {
    n += 1;
    candidate = `${initial}_${n}`;
  }
  used.set(initial, n + 1);
  used.set(candidate, 1);
  return candidate;
}

const lines = [];
lines.push(
  '/* Auto-generated by scripts/build-icons-index.mjs — DO NOT EDIT BY HAND. */'
);
for (const file of files) {
  const base = file.replace(/\.tsx$/, '');
  const identifier = uniqueIdentifier(base);
  // Preserve the original path (may include spaces or parentheses)
  lines.push(`export { default as ${identifier} } from './${base}';`);
}
lines.push('');

await fs.writeFile(INDEX_FILE, lines.join('\n'));
console.log(`✓ Wrote ${INDEX_FILE} with ${files.length} exports`);
